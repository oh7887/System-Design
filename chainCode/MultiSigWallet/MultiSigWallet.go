// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MultiSigWallet

import (
	"math/big"
	"strings"

	"github.com/KasperLiu/gobcos/accounts/abi"
	"github.com/KasperLiu/gobcos/accounts/abi/bind"
	"github.com/KasperLiu/gobcos/common"
	"github.com/KasperLiu/gobcos/core/types"
	"github.com/KasperLiu/gobcos/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = common.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MultiSigWalletABI is the input ABI used to generate the binding from.
const MultiSigWalletABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requiredSignatures\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"L\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ConfirmEarnmoney\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RevokeEarnmoney\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addbudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"submitEarnmoney\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EarnMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"submitearnMoneytime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"earnMoneytime\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"revokeAlreadyEarnmoneycount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"budget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"cancellationEarnmoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"cancellationTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"chageContractowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newlevel\",\"type\":\"uint256\"}],\"name\":\"changeViewRight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"NumberOfowner\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"who\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"change\",\"type\":\"address\"}],\"name\":\"changepowerfulman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newrequire\",\"type\":\"uint256\"}],\"name\":\"changerequiredSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmationsearnmoney\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"confirmearnMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"earnMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnmoneyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"send\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"submitTransactiontime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"executeTransactiontime\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"revokeAlreadyTransactioncount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getearnmoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"execute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"submitearnMoneytime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"earnMoneytime\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"revokeAlreadyEarnmoneycount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isConfirmedtransation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isConfirmedtransationEarn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"who\",\"type\":\"uint256\"}],\"name\":\"popowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"pushownere\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeAlreadyEarnmoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"}],\"name\":\"revokeAlreadyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokealreadyEarnmoney\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokealreadyTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeearnMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"submitearnMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"contractDateTimeContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"submitTransactiontime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"executeTransactiontime\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"revokeAlreadyTransactioncount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedearnIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedtransationsIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MultiSigWalletBin is the compiled bytecode used for deploying new contracts.
var MultiSigWalletBin = ""

// DeployMultiSigWallet deploys a new Ethereum contract, binding an instance of MultiSigWallet to it.
func DeployMultiSigWallet(auth *bind.TransactOpts, backend bind.ContractBackend, _owners []common.Address, _requiredSignatures *big.Int, counts *big.Int, L *big.Int) (common.Address, *types.RawTransaction, *MultiSigWallet, error) {
	parsed, err := abi.JSON(strings.NewReader(MultiSigWalletABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MultiSigWalletBin), backend, _owners, _requiredSignatures, counts, L)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultiSigWallet{MultiSigWalletCaller: MultiSigWalletCaller{contract: contract}, MultiSigWalletTransactor: MultiSigWalletTransactor{contract: contract}, MultiSigWalletFilterer: MultiSigWalletFilterer{contract: contract}}, nil
}

// MultiSigWallet is an auto generated Go binding around an Ethereum contract.
type MultiSigWallet struct {
	MultiSigWalletCaller     // Read-only binding to the contract
	MultiSigWalletTransactor // Write-only binding to the contract
	MultiSigWalletFilterer   // Log filterer for contract events
}

// MultiSigWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type MultiSigWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiSigWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MultiSigWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiSigWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MultiSigWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiSigWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MultiSigWalletSession struct {
	Contract     *MultiSigWallet   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MultiSigWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MultiSigWalletCallerSession struct {
	Contract *MultiSigWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// MultiSigWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MultiSigWalletTransactorSession struct {
	Contract     *MultiSigWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MultiSigWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type MultiSigWalletRaw struct {
	Contract *MultiSigWallet // Generic contract binding to access the raw methods on
}

// MultiSigWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MultiSigWalletCallerRaw struct {
	Contract *MultiSigWalletCaller // Generic read-only contract binding to access the raw methods on
}

// MultiSigWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MultiSigWalletTransactorRaw struct {
	Contract *MultiSigWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMultiSigWallet creates a new instance of MultiSigWallet, bound to a specific deployed contract.
func NewMultiSigWallet(address common.Address, backend bind.ContractBackend) (*MultiSigWallet, error) {
	contract, err := bindMultiSigWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultiSigWallet{MultiSigWalletCaller: MultiSigWalletCaller{contract: contract}, MultiSigWalletTransactor: MultiSigWalletTransactor{contract: contract}, MultiSigWalletFilterer: MultiSigWalletFilterer{contract: contract}}, nil
}

// NewMultiSigWalletCaller creates a new read-only instance of MultiSigWallet, bound to a specific deployed contract.
func NewMultiSigWalletCaller(address common.Address, caller bind.ContractCaller) (*MultiSigWalletCaller, error) {
	contract, err := bindMultiSigWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletCaller{contract: contract}, nil
}

// NewMultiSigWalletTransactor creates a new write-only instance of MultiSigWallet, bound to a specific deployed contract.
func NewMultiSigWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*MultiSigWalletTransactor, error) {
	contract, err := bindMultiSigWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletTransactor{contract: contract}, nil
}

// NewMultiSigWalletFilterer creates a new log filterer instance of MultiSigWallet, bound to a specific deployed contract.
func NewMultiSigWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*MultiSigWalletFilterer, error) {
	contract, err := bindMultiSigWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletFilterer{contract: contract}, nil
}

// bindMultiSigWallet binds a generic wrapper to an already deployed contract.
func bindMultiSigWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MultiSigWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiSigWallet *MultiSigWalletRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MultiSigWallet.Contract.MultiSigWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiSigWallet *MultiSigWalletRaw) Transfer(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.MultiSigWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiSigWallet *MultiSigWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.MultiSigWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiSigWallet *MultiSigWalletCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MultiSigWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiSigWallet *MultiSigWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiSigWallet *MultiSigWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.contract.Transact(opts, method, params...)
}

// EarnMoney is a paid mutator transaction binding the contract method 0x9df8cde2.
//
// Solidity: function EarnMoney(uint256 ) returns(uint256 value, string data, bool executed, uint256 numConfirmations, address sender, string submitearnMoneytime, string earnMoneytime, uint256 revokeAlreadyEarnmoneycount, bytes32 signature)
func (_MultiSigWallet *MultiSigWalletTransactor) EarnMoney(opts *bind.TransactOpts, arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "EarnMoney", arg0)
}

// EarnMoney is a paid mutator transaction binding the contract method 0x9df8cde2.
//
// Solidity: function EarnMoney(uint256 ) returns(uint256 value, string data, bool executed, uint256 numConfirmations, address sender, string submitearnMoneytime, string earnMoneytime, uint256 revokeAlreadyEarnmoneycount, bytes32 signature)
func (_MultiSigWallet *MultiSigWalletSession) EarnMoney(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.EarnMoney(&_MultiSigWallet.TransactOpts, arg0)
}

// EarnMoney is a paid mutator transaction binding the contract method 0x9df8cde2.
//
// Solidity: function EarnMoney(uint256 ) returns(uint256 value, string data, bool executed, uint256 numConfirmations, address sender, string submitearnMoneytime, string earnMoneytime, uint256 revokeAlreadyEarnmoneycount, bytes32 signature)
func (_MultiSigWallet *MultiSigWalletTransactorSession) EarnMoney(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.EarnMoney(&_MultiSigWallet.TransactOpts, arg0)
}

// Budget is a paid mutator transaction binding the contract method 0xed01bf29.
//
// Solidity: function budget() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactor) Budget(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "budget")
}

// Budget is a paid mutator transaction binding the contract method 0xed01bf29.
//
// Solidity: function budget() returns(uint256)
func (_MultiSigWallet *MultiSigWalletSession) Budget() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Budget(&_MultiSigWallet.TransactOpts)
}

// Budget is a paid mutator transaction binding the contract method 0xed01bf29.
//
// Solidity: function budget() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Budget() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Budget(&_MultiSigWallet.TransactOpts)
}

// CancellationEarnmoney is a paid mutator transaction binding the contract method 0x3de3fbfd.
//
// Solidity: function cancellationEarnmoney(uint256 index, string data) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) CancellationEarnmoney(opts *bind.TransactOpts, index *big.Int, data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "cancellationEarnmoney", index, data)
}

// CancellationEarnmoney is a paid mutator transaction binding the contract method 0x3de3fbfd.
//
// Solidity: function cancellationEarnmoney(uint256 index, string data) returns()
func (_MultiSigWallet *MultiSigWalletSession) CancellationEarnmoney(index *big.Int, data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.CancellationEarnmoney(&_MultiSigWallet.TransactOpts, index, data)
}

// CancellationEarnmoney is a paid mutator transaction binding the contract method 0x3de3fbfd.
//
// Solidity: function cancellationEarnmoney(uint256 index, string data) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) CancellationEarnmoney(index *big.Int, data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.CancellationEarnmoney(&_MultiSigWallet.TransactOpts, index, data)
}

// CancellationTransaction is a paid mutator transaction binding the contract method 0xcf4a051c.
//
// Solidity: function cancellationTransaction(uint256 _txId, string data) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) CancellationTransaction(opts *bind.TransactOpts, _txId *big.Int, data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "cancellationTransaction", _txId, data)
}

// CancellationTransaction is a paid mutator transaction binding the contract method 0xcf4a051c.
//
// Solidity: function cancellationTransaction(uint256 _txId, string data) returns()
func (_MultiSigWallet *MultiSigWalletSession) CancellationTransaction(_txId *big.Int, data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.CancellationTransaction(&_MultiSigWallet.TransactOpts, _txId, data)
}

// CancellationTransaction is a paid mutator transaction binding the contract method 0xcf4a051c.
//
// Solidity: function cancellationTransaction(uint256 _txId, string data) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) CancellationTransaction(_txId *big.Int, data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.CancellationTransaction(&_MultiSigWallet.TransactOpts, _txId, data)
}

// ChageContractowner is a paid mutator transaction binding the contract method 0xfde4b3c5.
//
// Solidity: function chageContractowner(address newowner) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) ChageContractowner(opts *bind.TransactOpts, newowner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "chageContractowner", newowner)
}

// ChageContractowner is a paid mutator transaction binding the contract method 0xfde4b3c5.
//
// Solidity: function chageContractowner(address newowner) returns()
func (_MultiSigWallet *MultiSigWalletSession) ChageContractowner(newowner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ChageContractowner(&_MultiSigWallet.TransactOpts, newowner)
}

// ChageContractowner is a paid mutator transaction binding the contract method 0xfde4b3c5.
//
// Solidity: function chageContractowner(address newowner) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) ChageContractowner(newowner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ChageContractowner(&_MultiSigWallet.TransactOpts, newowner)
}

// ChangeViewRight is a paid mutator transaction binding the contract method 0x1a2db800.
//
// Solidity: function changeViewRight(uint256 newlevel) returns(uint256 NumberOfowner)
func (_MultiSigWallet *MultiSigWalletTransactor) ChangeViewRight(opts *bind.TransactOpts, newlevel *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "changeViewRight", newlevel)
}

// ChangeViewRight is a paid mutator transaction binding the contract method 0x1a2db800.
//
// Solidity: function changeViewRight(uint256 newlevel) returns(uint256 NumberOfowner)
func (_MultiSigWallet *MultiSigWalletSession) ChangeViewRight(newlevel *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ChangeViewRight(&_MultiSigWallet.TransactOpts, newlevel)
}

// ChangeViewRight is a paid mutator transaction binding the contract method 0x1a2db800.
//
// Solidity: function changeViewRight(uint256 newlevel) returns(uint256 NumberOfowner)
func (_MultiSigWallet *MultiSigWalletTransactorSession) ChangeViewRight(newlevel *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ChangeViewRight(&_MultiSigWallet.TransactOpts, newlevel)
}

// Changepowerfulman is a paid mutator transaction binding the contract method 0x35ff6b65.
//
// Solidity: function changepowerfulman(uint256 who, address change) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) Changepowerfulman(opts *bind.TransactOpts, who *big.Int, change common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "changepowerfulman", who, change)
}

// Changepowerfulman is a paid mutator transaction binding the contract method 0x35ff6b65.
//
// Solidity: function changepowerfulman(uint256 who, address change) returns()
func (_MultiSigWallet *MultiSigWalletSession) Changepowerfulman(who *big.Int, change common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Changepowerfulman(&_MultiSigWallet.TransactOpts, who, change)
}

// Changepowerfulman is a paid mutator transaction binding the contract method 0x35ff6b65.
//
// Solidity: function changepowerfulman(uint256 who, address change) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) Changepowerfulman(who *big.Int, change common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Changepowerfulman(&_MultiSigWallet.TransactOpts, who, change)
}

// ChangerequiredSignatures is a paid mutator transaction binding the contract method 0x6c29a744.
//
// Solidity: function changerequiredSignatures(uint256 newrequire) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) ChangerequiredSignatures(opts *bind.TransactOpts, newrequire *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "changerequiredSignatures", newrequire)
}

// ChangerequiredSignatures is a paid mutator transaction binding the contract method 0x6c29a744.
//
// Solidity: function changerequiredSignatures(uint256 newrequire) returns()
func (_MultiSigWallet *MultiSigWalletSession) ChangerequiredSignatures(newrequire *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ChangerequiredSignatures(&_MultiSigWallet.TransactOpts, newrequire)
}

// ChangerequiredSignatures is a paid mutator transaction binding the contract method 0x6c29a744.
//
// Solidity: function changerequiredSignatures(uint256 newrequire) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) ChangerequiredSignatures(newrequire *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ChangerequiredSignatures(&_MultiSigWallet.TransactOpts, newrequire)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) ConfirmTransaction(opts *bind.TransactOpts, _txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "confirmTransaction", _txId)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletSession) ConfirmTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ConfirmTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) ConfirmTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ConfirmTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// Confirmations is a paid mutator transaction binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) Confirmations(opts *bind.TransactOpts, arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "confirmations", arg0, arg1)
}

// Confirmations is a paid mutator transaction binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) Confirmations(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Confirmations(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// Confirmations is a paid mutator transaction binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Confirmations(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Confirmations(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// Confirmationsearnmoney is a paid mutator transaction binding the contract method 0x84a5e9de.
//
// Solidity: function confirmationsearnmoney(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) Confirmationsearnmoney(opts *bind.TransactOpts, arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "confirmationsearnmoney", arg0, arg1)
}

// Confirmationsearnmoney is a paid mutator transaction binding the contract method 0x84a5e9de.
//
// Solidity: function confirmationsearnmoney(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) Confirmationsearnmoney(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Confirmationsearnmoney(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// Confirmationsearnmoney is a paid mutator transaction binding the contract method 0x84a5e9de.
//
// Solidity: function confirmationsearnmoney(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Confirmationsearnmoney(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Confirmationsearnmoney(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// ConfirmearnMoney is a paid mutator transaction binding the contract method 0xfe15fd4c.
//
// Solidity: function confirmearnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) ConfirmearnMoney(opts *bind.TransactOpts, index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "confirmearnMoney", index)
}

// ConfirmearnMoney is a paid mutator transaction binding the contract method 0xfe15fd4c.
//
// Solidity: function confirmearnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletSession) ConfirmearnMoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ConfirmearnMoney(&_MultiSigWallet.TransactOpts, index)
}

// ConfirmearnMoney is a paid mutator transaction binding the contract method 0xfe15fd4c.
//
// Solidity: function confirmearnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) ConfirmearnMoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ConfirmearnMoney(&_MultiSigWallet.TransactOpts, index)
}

// EarnMoney is a paid mutator transaction binding the contract method 0x80086eef.
//
// Solidity: function earnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) earnMoney(opts *bind.TransactOpts, index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "earnMoney", index)
}

// EarnMoney is a paid mutator transaction binding the contract method 0x80086eef.
//
// Solidity: function earnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletSession) earnMoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.EarnMoney(&_MultiSigWallet.TransactOpts, index)
}

// EarnMoney is a paid mutator transaction binding the contract method 0x80086eef.
//
// Solidity: function earnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) earnMoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.EarnMoney(&_MultiSigWallet.TransactOpts, index)
}

// EarnmoneyCount is a paid mutator transaction binding the contract method 0x94f3ba0e.
//
// Solidity: function earnmoneyCount() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactor) EarnmoneyCount(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "earnmoneyCount")
}

// EarnmoneyCount is a paid mutator transaction binding the contract method 0x94f3ba0e.
//
// Solidity: function earnmoneyCount() returns(uint256)
func (_MultiSigWallet *MultiSigWalletSession) EarnmoneyCount() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.EarnmoneyCount(&_MultiSigWallet.TransactOpts)
}

// EarnmoneyCount is a paid mutator transaction binding the contract method 0x94f3ba0e.
//
// Solidity: function earnmoneyCount() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactorSession) EarnmoneyCount() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.EarnmoneyCount(&_MultiSigWallet.TransactOpts)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, _txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "executeTransaction", _txId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletSession) ExecuteTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ExecuteTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) ExecuteTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.ExecuteTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// GetOwners is a paid mutator transaction binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() returns(address[])
func (_MultiSigWallet *MultiSigWalletTransactor) GetOwners(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "getOwners")
}

// GetOwners is a paid mutator transaction binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() returns(address[])
func (_MultiSigWallet *MultiSigWalletSession) GetOwners() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.GetOwners(&_MultiSigWallet.TransactOpts)
}

// GetOwners is a paid mutator transaction binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() returns(address[])
func (_MultiSigWallet *MultiSigWalletTransactorSession) GetOwners() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.GetOwners(&_MultiSigWallet.TransactOpts)
}

// GetTransaction is a paid mutator transaction binding the contract method 0x33ea3dc8.
//
// Solidity: function getTransaction(uint256 _txId) returns(address destination, uint256 value, string data, bool executed, uint256 numConfirmations, address send, string submitTransactiontime, string executeTransactiontime, bytes32 signature, uint256 revokeAlreadyTransactioncount)
func (_MultiSigWallet *MultiSigWalletTransactor) GetTransaction(opts *bind.TransactOpts, _txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "getTransaction", _txId)
}

// GetTransaction is a paid mutator transaction binding the contract method 0x33ea3dc8.
//
// Solidity: function getTransaction(uint256 _txId) returns(address destination, uint256 value, string data, bool executed, uint256 numConfirmations, address send, string submitTransactiontime, string executeTransactiontime, bytes32 signature, uint256 revokeAlreadyTransactioncount)
func (_MultiSigWallet *MultiSigWalletSession) GetTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.GetTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// GetTransaction is a paid mutator transaction binding the contract method 0x33ea3dc8.
//
// Solidity: function getTransaction(uint256 _txId) returns(address destination, uint256 value, string data, bool executed, uint256 numConfirmations, address send, string submitTransactiontime, string executeTransactiontime, bytes32 signature, uint256 revokeAlreadyTransactioncount)
func (_MultiSigWallet *MultiSigWalletTransactorSession) GetTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.GetTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// Getearnmoney is a paid mutator transaction binding the contract method 0xc3b781c4.
//
// Solidity: function getearnmoney(uint256 index) returns(uint256 value, string data, bool execute, uint256 numConfirmations, address sender, string submitearnMoneytime, string earnMoneytime, bytes32 signature, uint256 revokeAlreadyEarnmoneycount)
func (_MultiSigWallet *MultiSigWalletTransactor) Getearnmoney(opts *bind.TransactOpts, index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "getearnmoney", index)
}

// Getearnmoney is a paid mutator transaction binding the contract method 0xc3b781c4.
//
// Solidity: function getearnmoney(uint256 index) returns(uint256 value, string data, bool execute, uint256 numConfirmations, address sender, string submitearnMoneytime, string earnMoneytime, bytes32 signature, uint256 revokeAlreadyEarnmoneycount)
func (_MultiSigWallet *MultiSigWalletSession) Getearnmoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Getearnmoney(&_MultiSigWallet.TransactOpts, index)
}

// Getearnmoney is a paid mutator transaction binding the contract method 0xc3b781c4.
//
// Solidity: function getearnmoney(uint256 index) returns(uint256 value, string data, bool execute, uint256 numConfirmations, address sender, string submitearnMoneytime, string earnMoneytime, bytes32 signature, uint256 revokeAlreadyEarnmoneycount)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Getearnmoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Getearnmoney(&_MultiSigWallet.TransactOpts, index)
}

// IsConfirmedtransation is a paid mutator transaction binding the contract method 0xf5b74e2b.
//
// Solidity: function isConfirmedtransation(uint256 _txId, address _owner) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) IsConfirmedtransation(opts *bind.TransactOpts, _txId *big.Int, _owner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "isConfirmedtransation", _txId, _owner)
}

// IsConfirmedtransation is a paid mutator transaction binding the contract method 0xf5b74e2b.
//
// Solidity: function isConfirmedtransation(uint256 _txId, address _owner) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) IsConfirmedtransation(_txId *big.Int, _owner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.IsConfirmedtransation(&_MultiSigWallet.TransactOpts, _txId, _owner)
}

// IsConfirmedtransation is a paid mutator transaction binding the contract method 0xf5b74e2b.
//
// Solidity: function isConfirmedtransation(uint256 _txId, address _owner) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) IsConfirmedtransation(_txId *big.Int, _owner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.IsConfirmedtransation(&_MultiSigWallet.TransactOpts, _txId, _owner)
}

// IsConfirmedtransationEarn is a paid mutator transaction binding the contract method 0xe9262240.
//
// Solidity: function isConfirmedtransationEarn(uint256 _txId, address _owner) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) IsConfirmedtransationEarn(opts *bind.TransactOpts, _txId *big.Int, _owner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "isConfirmedtransationEarn", _txId, _owner)
}

// IsConfirmedtransationEarn is a paid mutator transaction binding the contract method 0xe9262240.
//
// Solidity: function isConfirmedtransationEarn(uint256 _txId, address _owner) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) IsConfirmedtransationEarn(_txId *big.Int, _owner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.IsConfirmedtransationEarn(&_MultiSigWallet.TransactOpts, _txId, _owner)
}

// IsConfirmedtransationEarn is a paid mutator transaction binding the contract method 0xe9262240.
//
// Solidity: function isConfirmedtransationEarn(uint256 _txId, address _owner) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) IsConfirmedtransationEarn(_txId *big.Int, _owner common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.IsConfirmedtransationEarn(&_MultiSigWallet.TransactOpts, _txId, _owner)
}

// IsOwner is a paid mutator transaction binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) IsOwner(opts *bind.TransactOpts, arg0 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "isOwner", arg0)
}

// IsOwner is a paid mutator transaction binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) IsOwner(arg0 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.IsOwner(&_MultiSigWallet.TransactOpts, arg0)
}

// IsOwner is a paid mutator transaction binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) IsOwner(arg0 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.IsOwner(&_MultiSigWallet.TransactOpts, arg0)
}

// Level is a paid mutator transaction binding the contract method 0x6fd5ae15.
//
// Solidity: function level() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactor) Level(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "level")
}

// Level is a paid mutator transaction binding the contract method 0x6fd5ae15.
//
// Solidity: function level() returns(uint256)
func (_MultiSigWallet *MultiSigWalletSession) Level() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Level(&_MultiSigWallet.TransactOpts)
}

// Level is a paid mutator transaction binding the contract method 0x6fd5ae15.
//
// Solidity: function level() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Level() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Level(&_MultiSigWallet.TransactOpts)
}

// Owners is a paid mutator transaction binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) returns(address)
func (_MultiSigWallet *MultiSigWalletTransactor) Owners(opts *bind.TransactOpts, arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "owners", arg0)
}

// Owners is a paid mutator transaction binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) returns(address)
func (_MultiSigWallet *MultiSigWalletSession) Owners(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Owners(&_MultiSigWallet.TransactOpts, arg0)
}

// Owners is a paid mutator transaction binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) returns(address)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Owners(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Owners(&_MultiSigWallet.TransactOpts, arg0)
}

// Popowner is a paid mutator transaction binding the contract method 0x31d197fc.
//
// Solidity: function popowner(uint256 who) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) Popowner(opts *bind.TransactOpts, who *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "popowner", who)
}

// Popowner is a paid mutator transaction binding the contract method 0x31d197fc.
//
// Solidity: function popowner(uint256 who) returns()
func (_MultiSigWallet *MultiSigWalletSession) Popowner(who *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Popowner(&_MultiSigWallet.TransactOpts, who)
}

// Popowner is a paid mutator transaction binding the contract method 0x31d197fc.
//
// Solidity: function popowner(uint256 who) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) Popowner(who *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Popowner(&_MultiSigWallet.TransactOpts, who)
}

// Pushownere is a paid mutator transaction binding the contract method 0xd90aa244.
//
// Solidity: function pushownere(address add) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) Pushownere(opts *bind.TransactOpts, add common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "pushownere", add)
}

// Pushownere is a paid mutator transaction binding the contract method 0xd90aa244.
//
// Solidity: function pushownere(address add) returns()
func (_MultiSigWallet *MultiSigWalletSession) Pushownere(add common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Pushownere(&_MultiSigWallet.TransactOpts, add)
}

// Pushownere is a paid mutator transaction binding the contract method 0xd90aa244.
//
// Solidity: function pushownere(address add) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) Pushownere(add common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Pushownere(&_MultiSigWallet.TransactOpts, add)
}

// RequiredSignatures is a paid mutator transaction binding the contract method 0x8d068043.
//
// Solidity: function requiredSignatures() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactor) RequiredSignatures(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "requiredSignatures")
}

// RequiredSignatures is a paid mutator transaction binding the contract method 0x8d068043.
//
// Solidity: function requiredSignatures() returns(uint256)
func (_MultiSigWallet *MultiSigWalletSession) RequiredSignatures() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RequiredSignatures(&_MultiSigWallet.TransactOpts)
}

// RequiredSignatures is a paid mutator transaction binding the contract method 0x8d068043.
//
// Solidity: function requiredSignatures() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactorSession) RequiredSignatures() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RequiredSignatures(&_MultiSigWallet.TransactOpts)
}

// RevokeAlreadyEarnmoney is a paid mutator transaction binding the contract method 0x08d4e0af.
//
// Solidity: function revokeAlreadyEarnmoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) RevokeAlreadyEarnmoney(opts *bind.TransactOpts, index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "revokeAlreadyEarnmoney", index)
}

// RevokeAlreadyEarnmoney is a paid mutator transaction binding the contract method 0x08d4e0af.
//
// Solidity: function revokeAlreadyEarnmoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletSession) RevokeAlreadyEarnmoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeAlreadyEarnmoney(&_MultiSigWallet.TransactOpts, index)
}

// RevokeAlreadyEarnmoney is a paid mutator transaction binding the contract method 0x08d4e0af.
//
// Solidity: function revokeAlreadyEarnmoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) RevokeAlreadyEarnmoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeAlreadyEarnmoney(&_MultiSigWallet.TransactOpts, index)
}

// RevokeAlreadyTransaction is a paid mutator transaction binding the contract method 0x57cda0c4.
//
// Solidity: function revokeAlreadyTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) RevokeAlreadyTransaction(opts *bind.TransactOpts, _txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "revokeAlreadyTransaction", _txId)
}

// RevokeAlreadyTransaction is a paid mutator transaction binding the contract method 0x57cda0c4.
//
// Solidity: function revokeAlreadyTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletSession) RevokeAlreadyTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeAlreadyTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// RevokeAlreadyTransaction is a paid mutator transaction binding the contract method 0x57cda0c4.
//
// Solidity: function revokeAlreadyTransaction(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) RevokeAlreadyTransaction(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeAlreadyTransaction(&_MultiSigWallet.TransactOpts, _txId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) RevokeConfirmation(opts *bind.TransactOpts, _txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "revokeConfirmation", _txId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletSession) RevokeConfirmation(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeConfirmation(&_MultiSigWallet.TransactOpts, _txId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _txId) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) RevokeConfirmation(_txId *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeConfirmation(&_MultiSigWallet.TransactOpts, _txId)
}

// RevokealreadyEarnmoney is a paid mutator transaction binding the contract method 0x90018dcc.
//
// Solidity: function revokealreadyEarnmoney(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) RevokealreadyEarnmoney(opts *bind.TransactOpts, arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "revokealreadyEarnmoney", arg0, arg1)
}

// RevokealreadyEarnmoney is a paid mutator transaction binding the contract method 0x90018dcc.
//
// Solidity: function revokealreadyEarnmoney(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) RevokealreadyEarnmoney(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokealreadyEarnmoney(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// RevokealreadyEarnmoney is a paid mutator transaction binding the contract method 0x90018dcc.
//
// Solidity: function revokealreadyEarnmoney(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) RevokealreadyEarnmoney(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokealreadyEarnmoney(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// RevokealreadyTransaction is a paid mutator transaction binding the contract method 0x74b223d5.
//
// Solidity: function revokealreadyTransaction(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) RevokealreadyTransaction(opts *bind.TransactOpts, arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "revokealreadyTransaction", arg0, arg1)
}

// RevokealreadyTransaction is a paid mutator transaction binding the contract method 0x74b223d5.
//
// Solidity: function revokealreadyTransaction(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) RevokealreadyTransaction(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokealreadyTransaction(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// RevokealreadyTransaction is a paid mutator transaction binding the contract method 0x74b223d5.
//
// Solidity: function revokealreadyTransaction(uint256 , address ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) RevokealreadyTransaction(arg0 *big.Int, arg1 common.Address) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokealreadyTransaction(&_MultiSigWallet.TransactOpts, arg0, arg1)
}

// RevokeearnMoney is a paid mutator transaction binding the contract method 0x55aaa460.
//
// Solidity: function revokeearnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) RevokeearnMoney(opts *bind.TransactOpts, index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "revokeearnMoney", index)
}

// RevokeearnMoney is a paid mutator transaction binding the contract method 0x55aaa460.
//
// Solidity: function revokeearnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletSession) RevokeearnMoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeearnMoney(&_MultiSigWallet.TransactOpts, index)
}

// RevokeearnMoney is a paid mutator transaction binding the contract method 0x55aaa460.
//
// Solidity: function revokeearnMoney(uint256 index) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) RevokeearnMoney(index *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.RevokeearnMoney(&_MultiSigWallet.TransactOpts, index)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0x03d79d28.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, string _data) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) SubmitTransaction(opts *bind.TransactOpts, _destination common.Address, _value *big.Int, _data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "submitTransaction", _destination, _value, _data)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0x03d79d28.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, string _data) returns()
func (_MultiSigWallet *MultiSigWalletSession) SubmitTransaction(_destination common.Address, _value *big.Int, _data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.SubmitTransaction(&_MultiSigWallet.TransactOpts, _destination, _value, _data)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0x03d79d28.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, string _data) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) SubmitTransaction(_destination common.Address, _value *big.Int, _data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.SubmitTransaction(&_MultiSigWallet.TransactOpts, _destination, _value, _data)
}

// SubmitearnMoney is a paid mutator transaction binding the contract method 0xdddfc820.
//
// Solidity: function submitearnMoney(uint256 count, string _data) returns()
func (_MultiSigWallet *MultiSigWalletTransactor) SubmitearnMoney(opts *bind.TransactOpts, count *big.Int, _data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "submitearnMoney", count, _data)
}

// SubmitearnMoney is a paid mutator transaction binding the contract method 0xdddfc820.
//
// Solidity: function submitearnMoney(uint256 count, string _data) returns()
func (_MultiSigWallet *MultiSigWalletSession) SubmitearnMoney(count *big.Int, _data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.SubmitearnMoney(&_MultiSigWallet.TransactOpts, count, _data)
}

// SubmitearnMoney is a paid mutator transaction binding the contract method 0xdddfc820.
//
// Solidity: function submitearnMoney(uint256 count, string _data) returns()
func (_MultiSigWallet *MultiSigWalletTransactorSession) SubmitearnMoney(count *big.Int, _data string) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.SubmitearnMoney(&_MultiSigWallet.TransactOpts, count, _data)
}

// Time is a paid mutator transaction binding the contract method 0x16ada547.
//
// Solidity: function time() returns(address)
func (_MultiSigWallet *MultiSigWalletTransactor) Time(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "time")
}

// Time is a paid mutator transaction binding the contract method 0x16ada547.
//
// Solidity: function time() returns(address)
func (_MultiSigWallet *MultiSigWalletSession) Time() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Time(&_MultiSigWallet.TransactOpts)
}

// Time is a paid mutator transaction binding the contract method 0x16ada547.
//
// Solidity: function time() returns(address)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Time() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Time(&_MultiSigWallet.TransactOpts)
}

// TransactionCount is a paid mutator transaction binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactor) TransactionCount(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "transactionCount")
}

// TransactionCount is a paid mutator transaction binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() returns(uint256)
func (_MultiSigWallet *MultiSigWalletSession) TransactionCount() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.TransactionCount(&_MultiSigWallet.TransactOpts)
}

// TransactionCount is a paid mutator transaction binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() returns(uint256)
func (_MultiSigWallet *MultiSigWalletTransactorSession) TransactionCount() (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.TransactionCount(&_MultiSigWallet.TransactOpts)
}

// Transactions is a paid mutator transaction binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) returns(address destination, address sender, uint256 value, string data, bool executed, uint256 numConfirmations, string submitTransactiontime, string executeTransactiontime, uint256 revokeAlreadyTransactioncount, bytes32 signature)
func (_MultiSigWallet *MultiSigWalletTransactor) Transactions(opts *bind.TransactOpts, arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "transactions", arg0)
}

// Transactions is a paid mutator transaction binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) returns(address destination, address sender, uint256 value, string data, bool executed, uint256 numConfirmations, string submitTransactiontime, string executeTransactiontime, uint256 revokeAlreadyTransactioncount, bytes32 signature)
func (_MultiSigWallet *MultiSigWalletSession) Transactions(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Transactions(&_MultiSigWallet.TransactOpts, arg0)
}

// Transactions is a paid mutator transaction binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) returns(address destination, address sender, uint256 value, string data, bool executed, uint256 numConfirmations, string submitTransactiontime, string executeTransactiontime, uint256 revokeAlreadyTransactioncount, bytes32 signature)
func (_MultiSigWallet *MultiSigWalletTransactorSession) Transactions(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.Transactions(&_MultiSigWallet.TransactOpts, arg0)
}

// UsedearnIndex is a paid mutator transaction binding the contract method 0x285bb07c.
//
// Solidity: function usedearnIndex(uint256 ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) UsedearnIndex(opts *bind.TransactOpts, arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "usedearnIndex", arg0)
}

// UsedearnIndex is a paid mutator transaction binding the contract method 0x285bb07c.
//
// Solidity: function usedearnIndex(uint256 ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) UsedearnIndex(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.UsedearnIndex(&_MultiSigWallet.TransactOpts, arg0)
}

// UsedearnIndex is a paid mutator transaction binding the contract method 0x285bb07c.
//
// Solidity: function usedearnIndex(uint256 ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) UsedearnIndex(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.UsedearnIndex(&_MultiSigWallet.TransactOpts, arg0)
}

// UsedtransationsIndex is a paid mutator transaction binding the contract method 0x8f10fc70.
//
// Solidity: function usedtransationsIndex(uint256 ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactor) UsedtransationsIndex(opts *bind.TransactOpts, arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.contract.Transact(opts, "usedtransationsIndex", arg0)
}

// UsedtransationsIndex is a paid mutator transaction binding the contract method 0x8f10fc70.
//
// Solidity: function usedtransationsIndex(uint256 ) returns(bool)
func (_MultiSigWallet *MultiSigWalletSession) UsedtransationsIndex(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.UsedtransationsIndex(&_MultiSigWallet.TransactOpts, arg0)
}

// UsedtransationsIndex is a paid mutator transaction binding the contract method 0x8f10fc70.
//
// Solidity: function usedtransationsIndex(uint256 ) returns(bool)
func (_MultiSigWallet *MultiSigWalletTransactorSession) UsedtransationsIndex(arg0 *big.Int) (*types.RawTransaction, error) {
	return _MultiSigWallet.Contract.UsedtransationsIndex(&_MultiSigWallet.TransactOpts, arg0)
}

// MultiSigWalletConfirmEarnmoneyIterator is returned from FilterConfirmEarnmoney and is used to iterate over the raw logs and unpacked data for ConfirmEarnmoney events raised by the MultiSigWallet contract.
type MultiSigWalletConfirmEarnmoneyIterator struct {
	Event *MultiSigWalletConfirmEarnmoney // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletConfirmEarnmoneyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletConfirmEarnmoney)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletConfirmEarnmoney)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletConfirmEarnmoneyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletConfirmEarnmoneyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletConfirmEarnmoney represents a ConfirmEarnmoney event raised by the MultiSigWallet contract.
type MultiSigWalletConfirmEarnmoney struct {
	Sender common.Address
	Index  *big.Int
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConfirmEarnmoney is a free log retrieval operation binding the contract event 0x08414945be0e53c6b0bd4f41c7f4923ff80a68ae9804a618c40b194f5b9f8e22.
//
// Solidity: event ConfirmEarnmoney(address indexed sender, uint256 indexed index, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterConfirmEarnmoney(opts *bind.FilterOpts, sender []common.Address, index []*big.Int, value []*big.Int) (*MultiSigWalletConfirmEarnmoneyIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "ConfirmEarnmoney", senderRule, indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletConfirmEarnmoneyIterator{contract: _MultiSigWallet.contract, event: "ConfirmEarnmoney", logs: logs, sub: sub}, nil
}

// WatchConfirmEarnmoney is a free log subscription operation binding the contract event 0x08414945be0e53c6b0bd4f41c7f4923ff80a68ae9804a618c40b194f5b9f8e22.
//
// Solidity: event ConfirmEarnmoney(address indexed sender, uint256 indexed index, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchConfirmEarnmoney(opts *bind.WatchOpts, sink chan<- *MultiSigWalletConfirmEarnmoney, sender []common.Address, index []*big.Int, value []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "ConfirmEarnmoney", senderRule, indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletConfirmEarnmoney)
				if err := _MultiSigWallet.contract.UnpackLog(event, "ConfirmEarnmoney", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmEarnmoney is a log parse operation binding the contract event 0x08414945be0e53c6b0bd4f41c7f4923ff80a68ae9804a618c40b194f5b9f8e22.
//
// Solidity: event ConfirmEarnmoney(address indexed sender, uint256 indexed index, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseConfirmEarnmoney(log types.Log) (*MultiSigWalletConfirmEarnmoney, error) {
	event := new(MultiSigWalletConfirmEarnmoney)
	if err := _MultiSigWallet.contract.UnpackLog(event, "ConfirmEarnmoney", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletConfirmTransactionIterator is returned from FilterConfirmTransaction and is used to iterate over the raw logs and unpacked data for ConfirmTransaction events raised by the MultiSigWallet contract.
type MultiSigWalletConfirmTransactionIterator struct {
	Event *MultiSigWalletConfirmTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletConfirmTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletConfirmTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletConfirmTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletConfirmTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletConfirmTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletConfirmTransaction represents a ConfirmTransaction event raised by the MultiSigWallet contract.
type MultiSigWalletConfirmTransaction struct {
	Sender common.Address
	TxId   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConfirmTransaction is a free log retrieval operation binding the contract event 0x5cbe105e36805f7820e291f799d5794ff948af2a5f664e580382defb63390041.
//
// Solidity: event ConfirmTransaction(address indexed sender, uint256 indexed txId)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterConfirmTransaction(opts *bind.FilterOpts, sender []common.Address, txId []*big.Int) (*MultiSigWalletConfirmTransactionIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "ConfirmTransaction", senderRule, txIdRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletConfirmTransactionIterator{contract: _MultiSigWallet.contract, event: "ConfirmTransaction", logs: logs, sub: sub}, nil
}

// WatchConfirmTransaction is a free log subscription operation binding the contract event 0x5cbe105e36805f7820e291f799d5794ff948af2a5f664e580382defb63390041.
//
// Solidity: event ConfirmTransaction(address indexed sender, uint256 indexed txId)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchConfirmTransaction(opts *bind.WatchOpts, sink chan<- *MultiSigWalletConfirmTransaction, sender []common.Address, txId []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "ConfirmTransaction", senderRule, txIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletConfirmTransaction)
				if err := _MultiSigWallet.contract.UnpackLog(event, "ConfirmTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmTransaction is a log parse operation binding the contract event 0x5cbe105e36805f7820e291f799d5794ff948af2a5f664e580382defb63390041.
//
// Solidity: event ConfirmTransaction(address indexed sender, uint256 indexed txId)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseConfirmTransaction(log types.Log) (*MultiSigWalletConfirmTransaction, error) {
	event := new(MultiSigWalletConfirmTransaction)
	if err := _MultiSigWallet.contract.UnpackLog(event, "ConfirmTransaction", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletExecuteTransactionIterator is returned from FilterExecuteTransaction and is used to iterate over the raw logs and unpacked data for ExecuteTransaction events raised by the MultiSigWallet contract.
type MultiSigWalletExecuteTransactionIterator struct {
	Event *MultiSigWalletExecuteTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletExecuteTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletExecuteTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletExecuteTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletExecuteTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletExecuteTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletExecuteTransaction represents a ExecuteTransaction event raised by the MultiSigWallet contract.
type MultiSigWalletExecuteTransaction struct {
	Sender      common.Address
	TxId        *big.Int
	Destination common.Address
	Value       *big.Int
	Data        string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterExecuteTransaction is a free log retrieval operation binding the contract event 0x8e0a5c7a32eb1eaf3d10995fd5d2f61f39ae3b260b42a7a3ca0918c40a397637.
//
// Solidity: event ExecuteTransaction(address indexed sender, uint256 indexed txId, address indexed destination, uint256 value, string data)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterExecuteTransaction(opts *bind.FilterOpts, sender []common.Address, txId []*big.Int, destination []common.Address) (*MultiSigWalletExecuteTransactionIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}
	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "ExecuteTransaction", senderRule, txIdRule, destinationRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletExecuteTransactionIterator{contract: _MultiSigWallet.contract, event: "ExecuteTransaction", logs: logs, sub: sub}, nil
}

// WatchExecuteTransaction is a free log subscription operation binding the contract event 0x8e0a5c7a32eb1eaf3d10995fd5d2f61f39ae3b260b42a7a3ca0918c40a397637.
//
// Solidity: event ExecuteTransaction(address indexed sender, uint256 indexed txId, address indexed destination, uint256 value, string data)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchExecuteTransaction(opts *bind.WatchOpts, sink chan<- *MultiSigWalletExecuteTransaction, sender []common.Address, txId []*big.Int, destination []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}
	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "ExecuteTransaction", senderRule, txIdRule, destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletExecuteTransaction)
				if err := _MultiSigWallet.contract.UnpackLog(event, "ExecuteTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteTransaction is a log parse operation binding the contract event 0x8e0a5c7a32eb1eaf3d10995fd5d2f61f39ae3b260b42a7a3ca0918c40a397637.
//
// Solidity: event ExecuteTransaction(address indexed sender, uint256 indexed txId, address indexed destination, uint256 value, string data)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseExecuteTransaction(log types.Log) (*MultiSigWalletExecuteTransaction, error) {
	event := new(MultiSigWalletExecuteTransaction)
	if err := _MultiSigWallet.contract.UnpackLog(event, "ExecuteTransaction", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the MultiSigWallet contract.
type MultiSigWalletRevokeConfirmationIterator struct {
	Event *MultiSigWalletRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletRevokeConfirmation represents a RevokeConfirmation event raised by the MultiSigWallet contract.
type MultiSigWalletRevokeConfirmation struct {
	Sender common.Address
	TxId   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0xf0dca620e2e81f7841d07bcc105e1704fb01475b278a9d4c236e1c62945edd55.
//
// Solidity: event RevokeConfirmation(address indexed sender, uint256 indexed txId)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, sender []common.Address, txId []*big.Int) (*MultiSigWalletRevokeConfirmationIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "RevokeConfirmation", senderRule, txIdRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletRevokeConfirmationIterator{contract: _MultiSigWallet.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0xf0dca620e2e81f7841d07bcc105e1704fb01475b278a9d4c236e1c62945edd55.
//
// Solidity: event RevokeConfirmation(address indexed sender, uint256 indexed txId)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *MultiSigWalletRevokeConfirmation, sender []common.Address, txId []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "RevokeConfirmation", senderRule, txIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletRevokeConfirmation)
				if err := _MultiSigWallet.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeConfirmation is a log parse operation binding the contract event 0xf0dca620e2e81f7841d07bcc105e1704fb01475b278a9d4c236e1c62945edd55.
//
// Solidity: event RevokeConfirmation(address indexed sender, uint256 indexed txId)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseRevokeConfirmation(log types.Log) (*MultiSigWalletRevokeConfirmation, error) {
	event := new(MultiSigWalletRevokeConfirmation)
	if err := _MultiSigWallet.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletRevokeEarnmoneyIterator is returned from FilterRevokeEarnmoney and is used to iterate over the raw logs and unpacked data for RevokeEarnmoney events raised by the MultiSigWallet contract.
type MultiSigWalletRevokeEarnmoneyIterator struct {
	Event *MultiSigWalletRevokeEarnmoney // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletRevokeEarnmoneyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletRevokeEarnmoney)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletRevokeEarnmoney)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletRevokeEarnmoneyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletRevokeEarnmoneyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletRevokeEarnmoney represents a RevokeEarnmoney event raised by the MultiSigWallet contract.
type MultiSigWalletRevokeEarnmoney struct {
	Sender common.Address
	Index  *big.Int
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevokeEarnmoney is a free log retrieval operation binding the contract event 0x795a1351958ba0fb47016c2c297a2b5ffecda8109030f51ef381e9d6f0ecc5d7.
//
// Solidity: event RevokeEarnmoney(address indexed sender, uint256 indexed index, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterRevokeEarnmoney(opts *bind.FilterOpts, sender []common.Address, index []*big.Int, value []*big.Int) (*MultiSigWalletRevokeEarnmoneyIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "RevokeEarnmoney", senderRule, indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletRevokeEarnmoneyIterator{contract: _MultiSigWallet.contract, event: "RevokeEarnmoney", logs: logs, sub: sub}, nil
}

// WatchRevokeEarnmoney is a free log subscription operation binding the contract event 0x795a1351958ba0fb47016c2c297a2b5ffecda8109030f51ef381e9d6f0ecc5d7.
//
// Solidity: event RevokeEarnmoney(address indexed sender, uint256 indexed index, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchRevokeEarnmoney(opts *bind.WatchOpts, sink chan<- *MultiSigWalletRevokeEarnmoney, sender []common.Address, index []*big.Int, value []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "RevokeEarnmoney", senderRule, indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletRevokeEarnmoney)
				if err := _MultiSigWallet.contract.UnpackLog(event, "RevokeEarnmoney", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeEarnmoney is a log parse operation binding the contract event 0x795a1351958ba0fb47016c2c297a2b5ffecda8109030f51ef381e9d6f0ecc5d7.
//
// Solidity: event RevokeEarnmoney(address indexed sender, uint256 indexed index, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseRevokeEarnmoney(log types.Log) (*MultiSigWalletRevokeEarnmoney, error) {
	event := new(MultiSigWalletRevokeEarnmoney)
	if err := _MultiSigWallet.contract.UnpackLog(event, "RevokeEarnmoney", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletSubmitTransactionIterator is returned from FilterSubmitTransaction and is used to iterate over the raw logs and unpacked data for SubmitTransaction events raised by the MultiSigWallet contract.
type MultiSigWalletSubmitTransactionIterator struct {
	Event *MultiSigWalletSubmitTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletSubmitTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletSubmitTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletSubmitTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletSubmitTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletSubmitTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletSubmitTransaction represents a SubmitTransaction event raised by the MultiSigWallet contract.
type MultiSigWalletSubmitTransaction struct {
	Sender      common.Address
	TxId        *big.Int
	Destination common.Address
	Value       *big.Int
	Data        string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSubmitTransaction is a free log retrieval operation binding the contract event 0x557adc301c59c014874da9dd74ad580f3d8a99947a7df3947967947d8e89920e.
//
// Solidity: event SubmitTransaction(address indexed sender, uint256 indexed txId, address indexed destination, uint256 value, string data)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterSubmitTransaction(opts *bind.FilterOpts, sender []common.Address, txId []*big.Int, destination []common.Address) (*MultiSigWalletSubmitTransactionIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}
	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "SubmitTransaction", senderRule, txIdRule, destinationRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletSubmitTransactionIterator{contract: _MultiSigWallet.contract, event: "SubmitTransaction", logs: logs, sub: sub}, nil
}

// WatchSubmitTransaction is a free log subscription operation binding the contract event 0x557adc301c59c014874da9dd74ad580f3d8a99947a7df3947967947d8e89920e.
//
// Solidity: event SubmitTransaction(address indexed sender, uint256 indexed txId, address indexed destination, uint256 value, string data)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchSubmitTransaction(opts *bind.WatchOpts, sink chan<- *MultiSigWalletSubmitTransaction, sender []common.Address, txId []*big.Int, destination []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var txIdRule []interface{}
	for _, txIdItem := range txId {
		txIdRule = append(txIdRule, txIdItem)
	}
	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "SubmitTransaction", senderRule, txIdRule, destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletSubmitTransaction)
				if err := _MultiSigWallet.contract.UnpackLog(event, "SubmitTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitTransaction is a log parse operation binding the contract event 0x557adc301c59c014874da9dd74ad580f3d8a99947a7df3947967947d8e89920e.
//
// Solidity: event SubmitTransaction(address indexed sender, uint256 indexed txId, address indexed destination, uint256 value, string data)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseSubmitTransaction(log types.Log) (*MultiSigWalletSubmitTransaction, error) {
	event := new(MultiSigWalletSubmitTransaction)
	if err := _MultiSigWallet.contract.UnpackLog(event, "SubmitTransaction", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletAddbudgetIterator is returned from FilterAddbudget and is used to iterate over the raw logs and unpacked data for Addbudget events raised by the MultiSigWallet contract.
type MultiSigWalletAddbudgetIterator struct {
	Event *MultiSigWalletAddbudget // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletAddbudgetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletAddbudget)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletAddbudget)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletAddbudgetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletAddbudgetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletAddbudget represents a Addbudget event raised by the MultiSigWallet contract.
type MultiSigWalletAddbudget struct {
	Sender common.Address
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddbudget is a free log retrieval operation binding the contract event 0x04fd36ec02c7f59d65bba4239c06a03c272770f8ebf6ba0a463a991ee6ec53e5.
//
// Solidity: event addbudget(address indexed sender, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterAddbudget(opts *bind.FilterOpts, sender []common.Address, value []*big.Int) (*MultiSigWalletAddbudgetIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "addbudget", senderRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletAddbudgetIterator{contract: _MultiSigWallet.contract, event: "addbudget", logs: logs, sub: sub}, nil
}

// WatchAddbudget is a free log subscription operation binding the contract event 0x04fd36ec02c7f59d65bba4239c06a03c272770f8ebf6ba0a463a991ee6ec53e5.
//
// Solidity: event addbudget(address indexed sender, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchAddbudget(opts *bind.WatchOpts, sink chan<- *MultiSigWalletAddbudget, sender []common.Address, value []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "addbudget", senderRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletAddbudget)
				if err := _MultiSigWallet.contract.UnpackLog(event, "addbudget", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddbudget is a log parse operation binding the contract event 0x04fd36ec02c7f59d65bba4239c06a03c272770f8ebf6ba0a463a991ee6ec53e5.
//
// Solidity: event addbudget(address indexed sender, uint256 indexed value)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseAddbudget(log types.Log) (*MultiSigWalletAddbudget, error) {
	event := new(MultiSigWalletAddbudget)
	if err := _MultiSigWallet.contract.UnpackLog(event, "addbudget", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MultiSigWalletSubmitEarnmoneyIterator is returned from FilterSubmitEarnmoney and is used to iterate over the raw logs and unpacked data for SubmitEarnmoney events raised by the MultiSigWallet contract.
type MultiSigWalletSubmitEarnmoneyIterator struct {
	Event *MultiSigWalletSubmitEarnmoney // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiSigWalletSubmitEarnmoneyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiSigWalletSubmitEarnmoney)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiSigWalletSubmitEarnmoney)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiSigWalletSubmitEarnmoneyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiSigWalletSubmitEarnmoneyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiSigWalletSubmitEarnmoney represents a SubmitEarnmoney event raised by the MultiSigWallet contract.
type MultiSigWalletSubmitEarnmoney struct {
	Sender common.Address
	Value  *big.Int
	Data   string
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSubmitEarnmoney is a free log retrieval operation binding the contract event 0xbc5a0bd0573c2d6949cbb07c9f0a9b855e9697f8689ab0941d11fecb51646ae7.
//
// Solidity: event submitEarnmoney(address indexed sender, uint256 value, string data, uint256 index)
func (_MultiSigWallet *MultiSigWalletFilterer) FilterSubmitEarnmoney(opts *bind.FilterOpts, sender []common.Address) (*MultiSigWalletSubmitEarnmoneyIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MultiSigWallet.contract.FilterLogs(opts, "submitEarnmoney", senderRule)
	if err != nil {
		return nil, err
	}
	return &MultiSigWalletSubmitEarnmoneyIterator{contract: _MultiSigWallet.contract, event: "submitEarnmoney", logs: logs, sub: sub}, nil
}

// WatchSubmitEarnmoney is a free log subscription operation binding the contract event 0xbc5a0bd0573c2d6949cbb07c9f0a9b855e9697f8689ab0941d11fecb51646ae7.
//
// Solidity: event submitEarnmoney(address indexed sender, uint256 value, string data, uint256 index)
func (_MultiSigWallet *MultiSigWalletFilterer) WatchSubmitEarnmoney(opts *bind.WatchOpts, sink chan<- *MultiSigWalletSubmitEarnmoney, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MultiSigWallet.contract.WatchLogs(opts, "submitEarnmoney", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiSigWalletSubmitEarnmoney)
				if err := _MultiSigWallet.contract.UnpackLog(event, "submitEarnmoney", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitEarnmoney is a log parse operation binding the contract event 0xbc5a0bd0573c2d6949cbb07c9f0a9b855e9697f8689ab0941d11fecb51646ae7.
//
// Solidity: event submitEarnmoney(address indexed sender, uint256 value, string data, uint256 index)
func (_MultiSigWallet *MultiSigWalletFilterer) ParseSubmitEarnmoney(log types.Log) (*MultiSigWalletSubmitEarnmoney, error) {
	event := new(MultiSigWalletSubmitEarnmoney)
	if err := _MultiSigWallet.contract.UnpackLog(event, "submitEarnmoney", log); err != nil {
		return nil, err
	}
	return event, nil
}
